using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace fcfs2
{
    class Data
    { //initializing and declaring our variables
        public Data(String n, List<int> d)
        {   name = n;
            info = d;
        }
        public String name;
        public List<int> info;
        public int res = 0;
        public int Totalio = 0;
        public int io = 0;
        public int ioc = 0;
        public bool firstrun = true;
        public int w = 0;
        public int tr = 0;
        public int CPU = 0;
        public static Queue<Data> ready;
        public static List<Data> datainio;
        public static float totaltime = 0;
        public static float totalallcpu = 0;

    class Program
    {
        static void Main(string[] args) //setting up all information into a list to be put into a queue
        {
            Data p1 = new Data("P1", new List<int> { 5, 27, 3, 31, 5, 43, 4, 18, 6, 22, 4, 26, 3, 24, 4 });
            Data p2 = new Data("P2", new List<int> { 4, 48, 5, 44, 7, 42, 12, 37, 9, 76, 4, 41, 9, 31, 7, 43, 8 });
            Data p3 = new Data("P3", new List<int> { 8, 33, 12, 41, 18, 65, 14, 21, 4, 61, 15, 18, 14, 26, 5, 31, 6 });
            Data p4 = new Data("P4", new List<int> { 3, 35, 4, 41, 5, 45, 3, 51, 4, 61, 5, 54, 6, 82, 5, 77, 3 });
            Data p5 = new Data("P5", new List<int> { 16, 24, 17, 21, 5, 36, 16, 26, 7, 31, 13, 28, 11, 21, 6, 13, 3, 11, 4 });
            Data p6 = new Data("P6", new List<int> { 11, 22, 4, 8, 5, 10, 6, 12, 7, 14, 9, 18, 12, 24, 15, 30, 8 });
            Data p7 = new Data("P7", new List<int> { 14, 46, 17, 41, 11, 42, 15, 21, 4, 32, 7, 19, 16, 33, 10 });
            Data p8 = new Data("P8", new List<int> { 4, 14, 5, 33, 6, 51, 14, 73, 16, 87, 6 });
            ready = new Queue<Data>();
            ready.Enqueue(p1);
            ready.Enqueue(p2);
            ready.Enqueue(p3);
            ready.Enqueue(p4);
            ready.Enqueue(p5);
            ready.Enqueue(p6);
            ready.Enqueue(p7);
            ready.Enqueue(p8);
            datainio = new List<Data>();
            int completeProcesses = 0;
            int cpub = 0;
            while (completeProcesses != 8)
            {
            if (ready.Count != 0)
            {
            Data d = ready.Dequeue();
            if (d.firstrun == true)
            {
            d.res = d.w;
            d.firstrun = false;
            }
            cpub = d.info[0];
            d.CPU = d.CPU + cpub;
            d.info.RemoveAt(0);

            printexecution(d);
//loop for cpu burst, until it is completed
            for (int i = 0; i < cpub; i++)
            {
            totalallcpu++;
            totaltime++;
            if (totaltime == 400)
            {
            int r = 0;
            }
            for (int k = 0; k < datainio.Count; k
            {
            datainio.ElementAt(k).ioc++;
//This checks if process has completed
            if (datainio.ElementAt(k).ioc == datainio.ElementAt(k).io)
            {
            datainio.ElementAt(k).io = 0;
            datainio.ElementAt(k).ioc = 0;
            ready.Enqueue(datainio.ElementAt(k));
            datainio.RemoveAt(k);
            }
            }
//Wait times incremented
           for (int j = 0; j < ready.Count; j++)
            {
            ready.ElementAt(j).w++;
            }
            }

            if (d.info.Count != 0)//If process not completed, goes to I/O
            {
            d.io = d.info[0];
            d.Totalio = d.Totalio + d.io;
            d.info.RemoveAt(0);
            datainio.Add(d);
            Console.WriteLine("\nComplete? = NO");
            Console.WriteLine("\n---------------------------------------------------\n\n\n");
            }
            else//is it completed? 
            {
            d.tr = d.CPU + d.Totalio + d.w;
            completeProcesses++;
            Console.WriteLine("\nComplete? = YES");
            Console.WriteLine("\n---------------------------------------------------\n\n\n");
            }
            }
            else if (datainio.Count != 0)//Cpu incrementing in I/O counters
            {
            int n = 0;
            while (datainio.ElementAt(n).ioc < datainio.ElementAt(n).io)
            {
            totaltime++;
            datainio.ElementAt(n).ioc++;
            if (n == datainio.Count - 1)
            {
            n = 0;
            }
            else
            {
            n++;
            }

            }
            ready.Enqueue(datainio.ElementAt(n));
            datainio.RemoveAt(n);
            }
            }
            printresults(p1, p2, p3, p4, p5, p6, p7, p8);

        }
        
        public static void printexecution(Data p)
            { 
            Console.WriteLine("Execution Time: " + totaltime + "   For " + p.name);
            Console.WriteLine("inside Ready Queue\n");
            for (int j = 0; j < ready.Count; j++)
            {
            Console.WriteLine(ready.ElementAt(j).name + " CPU Burst: " + ready.ElementAt(j).info.First() + "\n");
            }
            int timeremaining = 0;
            Console.WriteLine("in I/O\n");
            for (int y = 0; y < datainio.Count; y++)
            {timeremaining = datainio.ElementAt(y).io - datainio.ElementAt(y).ioc;
            Console.WriteLine(datainio.ElementAt(y).name + " Time Remaining in I/O " + timeremaining + "\n");
            }

        }
        public static void printresults(Data p1, Data p2, Data p3, Data p4, Data p5, Data p6, Data p7, Data p8)
        {
                int totalw = p1.w + p2.w + p3.w + p4.w + p5.w + p6.w + p7.w + p8.w;
                double wave = totalw / 8;
                Console.WriteLine("\n\n\n\nResults:\n");
                Console.WriteLine("\nwait Times\n");
                Console.WriteLine(" p1= " + p1.w + " p2= " + p2.w + " p3= " + p3.w + " p4= " + p4.w + " p5= " + p5.w + " p6= " + p6.w + " p7= " + p7.w + " p8= " + p8.w);
                Console.WriteLine("Avg wait Time= " + wave);
                float totaltr = p1.tr + p2.tr + p3.tr + p4.tr + p5.tr + p6.tr + p7.tr + p8.tr;
                float turnaroundave = totaltr / 8;
                Console.WriteLine("\nTurnaround Times\n");
                Console.WriteLine("p1= " + p1.tr + " p2= " + p2.tr + " p3= " + p3.tr + " p4= " + p4.tr + " p5= " + p5.tr + " p6= " + p6.tr + " p7= " + p7.tr + " p8= " + p8.tr);
                Console.WriteLine("\nAverage Turnaround Time= " + turnaroundave);
                float cpuutilization = totalallcpu / totaltime;
                cpuutilization = cpuutilization * 100;
                Console.WriteLine("\nCPU Utilization= " + cpuutilization + "%");
                Console.WriteLine("\nResponse Times\n");
                Console.WriteLine("p1= " + p1.res + " p2= " + p2.res + " p3= " + p3.res + " p4= " + p4.res + " p5= " + p5.res + " p6= " + p6.res + " p7= " + p7.res + " p8= " + p8.res);
                float totalres = p1.res + p2.res + p3.res + p4.res + p5.res + p6.res + p7.res + p8.res;
                float responseave = totalres / 8;
                Console.WriteLine("\nAverage Response Time= " + responseave);
                Console.WriteLine("Total Time= " + totaltime);
            }
    }
}
    }
